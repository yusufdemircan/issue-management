{"version":3,"file":"button-radio-group.directive.d.ts","sources":["button-radio-group.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, Provider, QueryList } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ButtonRadioDirective } from './button-radio.directive';\nexport declare const RADIO_CONTROL_VALUE_ACCESSOR: Provider;\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\nexport declare class ButtonRadioGroupDirective implements ControlValueAccessor {\n    private cdr;\n    onChange: Function;\n    onTouched: Function;\n    readonly role: string;\n    radioButtons: QueryList<ButtonRadioDirective>;\n    get value(): string | null;\n    set value(value: string | null);\n    private _value;\n    private _disabled;\n    get tabindex(): null | number;\n    constructor(cdr: ChangeDetectorRef);\n    writeValue(value: string | null): void;\n    registerOnChange(fn: () => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(disabled: boolean): void;\n    onFocus(): void;\n    onBlur(): void;\n    selectNext(event: KeyboardEvent): void;\n    selectPrevious(event: KeyboardEvent): void;\n    get disabled(): boolean;\n    private selectInDirection;\n    private getActiveOrFocusedRadio;\n}\n"]}